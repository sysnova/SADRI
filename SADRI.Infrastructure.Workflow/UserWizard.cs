// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;
using System.Collections;
using System.ServiceModel;
using SADRI.Infrastructure.Interfaces;
using SADRI.Domain.Entities.Enums;

namespace SADRI.Infrastructure.Workflow
{
    public class WizardUser : IWorkflowWizardUser
    {
        public delegate void UnhandledTriggerDelegate(States.UserWizard state, Triggers.UserWizard trigger);
        public delegate void EntryExitDelegate();
        public delegate bool GuardClauseDelegate();

        //Invoke EntryExit con Parametros
        public delegate void EntryExitParamDelegate(Hashtable s);
        //
        //PermitDynamic - En base a una Logica de Negocio, permite calcular la Transicion. <<DestinationSelector>>
        public delegate States.UserWizard DestinationSelectorDelegate(Hashtable s);
        //
        //Trigger basado en Parametros
        public StateMachine<States.UserWizard, Triggers.UserWizard>.TriggerWithParameters<Hashtable> paramNextTrigger;
        public StateMachine<States.UserWizard, Triggers.UserWizard>.TriggerWithParameters<Hashtable> paramPrevTrigger;
        public StateMachine<States.UserWizard, Triggers.UserWizard>.TriggerWithParameters<Hashtable> paramNewTrigger;
        //
        private readonly StateMachine<States.UserWizard, Triggers.UserWizard> stateMachine = null;

        public EntryExitDelegate OnInitEntry = null;
        public EntryExitDelegate OnInitExit = null;
        public EntryExitDelegate OnStep1Entry = null;
        public EntryExitDelegate OnStep1Exit = null;
        public EntryExitDelegate OnStep2Entry = null;
        public EntryExitDelegate OnStep2Exit = null;
        public EntryExitDelegate OnFinishEntry = null;
        public EntryExitDelegate OnFinishExit = null;
        //
        public EntryExitParamDelegate OnFinishEntryParam = (Hashtable s) =>
        {
            foreach (DictionaryEntry entry in s)
            {
                System.Diagnostics.Debug.WriteLine("{0}, {1}", entry.Key, entry.Value);
            }
        };
        //
        public GuardClauseDelegate GuardClauseFromInitToStep1UsingTriggerNext = null;
        public GuardClauseDelegate GuardClauseFromStep1ToInitUsingTriggerPrevious = null;
        public GuardClauseDelegate GuardClauseFromStep1ToStep2UsingTriggerNext = null;
        public GuardClauseDelegate GuardClauseFromStep2ToStep1UsingTriggerPrevious = null;
        public GuardClauseDelegate GuardClauseFromStep2ToFinishUsingTriggerPrevious = null;

        //DestinationSelect con Parametros
        public DestinationSelectorDelegate DestinationSelectorByStep2toFinish = (s) =>
        {
            foreach (DictionaryEntry entry in s)
            {
                System.Diagnostics.Debug.WriteLine("GUARD - {0}, {1}", entry.Key, entry.Value);
                if (entry.Key.ToString().Equals("UserName") && entry.Value.ToString().Equals("lgonzalez10"))
                {
                    throw new FaultException(
                        new FaultReason("Transition Error - " + "Next->Finish"),
                        new FaultCode("403"));
                }
            }
            return States.UserWizard.Finish;
        };


        public GuardClauseDelegate GuardClauseFromFinishToInitUsingTriggerNew = null;

        public UnhandledTriggerDelegate OnUnhandledTrigger = (State, Trigger) =>
        {
            throw new FaultException(
            new FaultReason("In the state: " + State + " - Operation not permitted"),
            new FaultCode("Transition Error - " + Trigger));
        };

        //public WizardUser()
        //    : this(States.UserWizard.Init)
        //{
        //}
        public WizardUser(States.UserWizard _state)
        {            

            stateMachine = new StateMachine<States.UserWizard, Triggers.UserWizard>(_state);

            paramNextTrigger = stateMachine.SetTriggerParameters<Hashtable>(Triggers.UserWizard.Next);
            paramPrevTrigger = stateMachine.SetTriggerParameters<Hashtable>(Triggers.UserWizard.Previous);
            paramNewTrigger = stateMachine.SetTriggerParameters<Hashtable>(Triggers.UserWizard.New);

            stateMachine.Configure(States.UserWizard.Init)
              .OnEntry(() => { if (OnInitEntry != null) OnInitEntry(); })
              .OnExit(() => { if (OnInitExit != null) OnInitExit(); })
              .PermitDynamicIf(paramNextTrigger, (s) => States.UserWizard.Step1, () => { if (GuardClauseFromInitToStep1UsingTriggerNext != null) return GuardClauseFromInitToStep1UsingTriggerNext(); return true; })
            ;
            stateMachine.Configure(States.UserWizard.Step1)
              .OnEntry(() => { if (OnStep1Entry != null) OnStep1Entry(); })
              .OnExit(() => { if (OnStep1Exit != null) OnStep1Exit(); })
              .PermitDynamicIf(paramPrevTrigger, (s) => States.UserWizard.Init, () => { if (GuardClauseFromStep1ToInitUsingTriggerPrevious != null) return GuardClauseFromStep1ToInitUsingTriggerPrevious(); return true; })
              .PermitDynamicIf(paramNextTrigger, (s) => States.UserWizard.Step2, () => { if (GuardClauseFromStep1ToStep2UsingTriggerNext != null) return GuardClauseFromStep1ToStep2UsingTriggerNext(); return true; })
            ;
            stateMachine.Configure(States.UserWizard.Step2)
              .OnEntry(() => { if (OnStep2Entry != null) OnStep2Entry(); })
              .OnExit(() => { if (OnStep2Exit != null) OnStep2Exit(); })
              .PermitDynamicIf(paramPrevTrigger, (s) => States.UserWizard.Step1, () => { if (GuardClauseFromStep2ToStep1UsingTriggerPrevious != null) return GuardClauseFromStep2ToStep1UsingTriggerPrevious(); return true; })
                //PermitDynamic con Parametros / Funcion
              .PermitDynamicIf(paramNextTrigger, (s) => { return DestinationSelectorByStep2toFinish(s); }, () => { if (GuardClauseFromStep2ToFinishUsingTriggerPrevious != null) return GuardClauseFromStep2ToFinishUsingTriggerPrevious(); return true; })
                //.PermitDynamic(paramNextTrigger, (s) => { return DestinationSelectorByStep2toFinish(s); })
            ;

            stateMachine.Configure(States.UserWizard.Finish)
              .OnEntry(() => { if (OnFinishEntry != null) OnFinishEntry(); })
                //Si entra al Finish con Parametros, ejecuta la Funcion
              .OnEntryFrom(paramNextTrigger, (s) =>
              {
                  if (OnFinishEntryParam != null) OnFinishEntryParam(s);
              })
                //
              .OnExit(() => { if (OnFinishExit != null) OnFinishExit(); })
              .PermitDynamicIf(paramNewTrigger, (s) => States.UserWizard.Init, () => { if (GuardClauseFromFinishToInitUsingTriggerNew != null) return GuardClauseFromFinishToInitUsingTriggerNew(); return true; })
            ;
            stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
        }

        //public bool TryFireTrigger(Trigger trigger)
        //{
        //  if (!stateMachine.CanFire(trigger))
        //  {
        //    return false;
        //  }
        //  stateMachine.Fire(trigger);
        //  return true;
        //}

        public bool TryFireTriggerParam(Triggers.UserWizard trigger, Hashtable arg)
        {
            switch (trigger)
            {
                case Triggers.UserWizard.Next:
                    {
                        stateMachine.Fire(paramNextTrigger, arg);
                        break;
                    }
                case Triggers.UserWizard.Previous:
                    {
                        stateMachine.Fire(paramPrevTrigger, arg);
                        break;
                    }
                case Triggers.UserWizard.New:
                    {
                        stateMachine.Fire(paramNewTrigger, arg);
                        break;
                    }
            }
            return true;
        }

        public States.UserWizard GetState
        {
            get
            {
                return stateMachine.State;
            }
        }

        public IEnumerable PermittedTriggers
        {
            get
            {
                return stateMachine.PermittedTriggers;
            }
        }

    }
}